use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Deserialize, Serialize, Eq, Hash, PartialEq)]
pub enum RomType {
    Apple2,
    Apple2Enhanced,
}

#[derive(Clone)]
pub struct RomInfo {
    pub name: String,
    pub bytes: Vec<u8>,
    pub offset: u16,
}

pub struct Roms {
    roms: HashMap<RomType, RomInfo>,
}

impl RomInfo {
    fn new(name: String, bytes: Vec<u8>, offset: u16) -> Self {
        Self { name, bytes, offset }
    }
}

impl Roms {
    pub fn get_rom(&self, rom_type: RomType) -> RomInfo {
        self.roms[&rom_type].clone()
    }
}

impl Default for Roms {
    fn default() -> Self {
        let roms = HashMap::from([
            (RomType::Apple2, RomInfo::new("Apple ][".into(),
                Vec::from(include_bytes!("../files/Apple2_Plus.rom")),
                0xd000)),
            (RomType::Apple2Enhanced, RomInfo::new("Apple ][".into(),
                Vec::from(include_bytes!("../files/Apple2e_Enhanced.rom")),
                0xc000)),
        ]);

        Self { roms }
    }
}

/// Disk ][: $C600
pub(crate) const DISK2_ROM: [u8; 256] = [
    0xA2, 0x20, 0xA0, 0x00, 0xA2, 0x03, 0x86, 0x3C, 0x8A, 0x0A, 0x24, 0x3C, 0xF0, 0x10, 0x05, 
    0x3C, 0x49, 0xFF, 0x29, 0x7E, 0xB0, 0x08, 0x4A, 0xD0, 0xFB, 0x98, 0x9D, 0x56, 0x03, 0xC8, 
    0xE8, 0x10, 0xE5, 0x20, 0x58, 0xFF, 0xBA, 0xBD, 0x00, 0x01, 0x0A, 0x0A, 0x0A, 0x0A, 0x85, 
    0x2B, 0xAA, 0xBD, 0x8E, 0xC0, 0xBD, 0x8C, 0xC0, 0xBD, 0x8A, 0xC0, 0xBD, 0x89, 0xC0, 0xA0, 
    0x50, 0xBD, 0x80, 0xC0, 0x98, 0x29, 0x03, 0x0A, 0x05, 0x2B, 0xAA, 0xBD, 0x81, 0xC0, 0xA9, 
    0x56, 0x20, 0xA8, 0xFC, 0x88, 0x10, 0xEB, 0x85, 0x26, 0x85, 0x3D, 0x85, 0x41, 0xA9, 0x08, 
    0x85, 0x27, 0x18, 0x08, 0xBD, 0x8C, 0xC0, 0x10, 0xFB, 0x49, 0xD5, 0xD0, 0xF7, 0xBD, 0x8C, 
    0xC0, 0x10, 0xFB, 0xC9, 0xAA, 0xD0, 0xF3, 0xEA, 0xBD, 0x8C, 0xC0, 0x10, 0xFB, 0xC9, 0x96, 
    0xF0, 0x09, 0x28, 0x90, 0xDF, 0x49, 0xAD, 0xF0, 0x25, 0xD0, 0xD9, 0xA0, 0x03, 0x85, 0x40, 
    0xBD, 0x8C, 0xC0, 0x10, 0xFB, 0x2A, 0x85, 0x3C, 0xBD, 0x8C, 0xC0, 0x10, 0xFB, 0x25, 0x3C, 
    0x88, 0xD0, 0xEC, 0x28, 0xC5, 0x3D, 0xD0, 0xBE, 0xA5, 0x40, 0xC5, 0x41, 0xD0, 0xB8, 0xB0, 
    0xB7, 0xA0, 0x56, 0x84, 0x3C, 0xBC, 0x8C, 0xC0, 0x10, 0xFB, 0x59, 0xD6, 0x02, 0xA4, 0x3C, 
    0x88, 0x99, 0x00, 0x03, 0xD0, 0xEE, 0x84, 0x3C, 0xBC, 0x8C, 0xC0, 0x10, 0xFB, 0x59, 0xD6, 
    0x02, 0xA4, 0x3C, 0x91, 0x26, 0xC8, 0xD0, 0xEF, 0xBC, 0x8C, 0xC0, 0x10, 0xFB, 0x59, 0xD6, 
    0x02, 0xD0, 0x87, 0xA0, 0x00, 0xA2, 0x56, 0xCA, 0x30, 0xFB, 0xB1, 0x26, 0x5E, 0x00, 0x03, 
    0x2A, 0x5E, 0x00, 0x03, 0x2A, 0x91, 0x26, 0xC8, 0xD0, 0xEE, 0xE6, 0x27, 0xE6, 0x3D, 0xA5, 
    0x3D, 0xCD, 0x00, 0x08, 0xA6, 0x2B, 0x90, 0xDB, 0x4C, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 
    0x00, 
];

/// Smartport: $C700
pub(crate) const SMARTPORT_ROM: [u8; 256] = [
//  0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    0xA9, 0x20, 0xA9, 0x00, 0xA9, 0x03, 0xA9, 0x3C, 0xD0, 0x08, 0x38, 0xB0, 0x01, 0x18, 0xB0, 0x77,
    0x90, 0x15, 0xA9, 0x00, 0x8D, 0xF2, 0xC0, 0xA9, 0x70, 0x8D, 0xF3, 0xC0, 0xAD, 0xF0, 0xC0, 0x6E,
    0xF1, 0xC0, 0x90, 0x40, 0x4C, 0x00, 0xC6, 0x68, 0x85, 0x46, 0x69, 0x03, 0xA8, 0x68, 0x85, 0x47,
    0x69, 0x00, 0x48, 0x98, 0x48, 0xA0, 0x01, 0xB1, 0x46, 0x85, 0x42, 0xC8, 0xD0, 0x0B, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xB0, 0xC5, 0xB1, 0x46, 0x85, 0x45, 0xC8, 0xB1, 0x46,
    0x85, 0x46, 0xA0, 0x01, 0xB1, 0x45, 0x85, 0x43, 0xC8, 0xB1, 0x45, 0x85, 0x44, 0xC8, 0xD0, 0x75,
    0x00, 0x38, 0xB0, 0xAA, 0xA9, 0x70, 0x85, 0x43, 0xA9, 0x00, 0x85, 0x44, 0x85, 0x46, 0x85, 0x47,
    0xA9, 0x08, 0x85, 0x45, 0xA9, 0x01, 0x85, 0x42, 0x20, 0x87, 0xC7, 0xB0, 0xA7, 0x2C, 0x61, 0xC0,
    0x30, 0xA2, 0xA2, 0x70, 0x4C, 0x01, 0x08, 0x18, 0xA5, 0x42, 0x8D, 0xF2, 0xC0, 0xA5, 0x43, 0x8D,
    0xF3, 0xC0, 0xA5, 0x44, 0x8D, 0xF4, 0xC0, 0xA5, 0x45, 0x8D, 0xF5, 0xC0, 0xA5, 0x46, 0x8D, 0xF6,
    0xC0, 0xA5, 0x47, 0x8D, 0xF7, 0xC0, 0xAD, 0xF0, 0xC0, 0x48, 0xA5, 0x42, 0xC9, 0x01, 0xD0, 0x03,
    0x20, 0xB8, 0xC7, 0x6E, 0xF1, 0xC0, 0x68, 0x60, 0x98, 0x48, 0xA0, 0x00, 0xAD, 0xF8, 0xC0, 0x91,
    0x44, 0xC8, 0xD0, 0xF8, 0xE6, 0x45, 0xA0, 0x00, 0xAD, 0xF8, 0xC0, 0x91, 0x44, 0xC8, 0xD0, 0xF8,
    0xC6, 0x45, 0x68, 0xA8, 0x60, 0xB1, 0x45, 0x48, 0xC8, 0xB1, 0x45, 0x48, 0xC8, 0xB1, 0x45, 0x85,
    0x47, 0x68, 0x85, 0x46, 0x68, 0x85, 0x45, 0xC8, 0xD0, 0x9D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0xD7, 0x0A,
];

